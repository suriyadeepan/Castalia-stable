//
// Generated file, do not edit! Created by nedtool 4.6 from src/node/communication/mac/hMac/HMacPacket.msg.
//

#ifndef _HMACPACKET_M_H_
#define _HMACPACKET_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
	#include "MacPacket_m.h"
// }}

/**
 * Class generated from <tt>src/node/communication/mac/hMac/HMacPacket.msg:5</tt> by nedtool.
 * <pre>
 * packet HMacPacket extends MacPacket
 * {
 *     int ptype;
 * 
 *     int slots;
 *     int slot_info[10];
 *     int node_id[10];
 * 
 *     double sleep_time;
 * }
 * </pre>
 */
class HMacPacket : public ::MacPacket
{
  protected:
    int ptype_var;
    int slots_var;
    int slot_info_var[10];
    int node_id_var[10];
    double sleep_time_var;

  private:
    void copy(const HMacPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const HMacPacket&);

  public:
    HMacPacket(const char *name=NULL, int kind=0);
    HMacPacket(const HMacPacket& other);
    virtual ~HMacPacket();
    HMacPacket& operator=(const HMacPacket& other);
    virtual HMacPacket *dup() const {return new HMacPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getPtype() const;
    virtual void setPtype(int ptype);
    virtual int getSlots() const;
    virtual void setSlots(int slots);
    virtual unsigned int getSlot_infoArraySize() const;
    virtual int getSlot_info(unsigned int k) const;
    virtual void setSlot_info(unsigned int k, int slot_info);
    virtual unsigned int getNode_idArraySize() const;
    virtual int getNode_id(unsigned int k) const;
    virtual void setNode_id(unsigned int k, int node_id);
    virtual double getSleep_time() const;
    virtual void setSleep_time(double sleep_time);
};

inline void doPacking(cCommBuffer *b, HMacPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, HMacPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef _HMACPACKET_M_H_

